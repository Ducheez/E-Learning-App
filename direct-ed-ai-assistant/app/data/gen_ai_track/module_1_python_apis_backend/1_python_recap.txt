1. Python Overview
High-level language: Abstracts away low-level details like memory management.
Multi-paradigm: Supports object-oriented, procedural, and functional programming.
Cross-platform: Runs on Windows, macOS, Linux, and more.
Open-source: Free to use and modify, backed by the Python Software Foundation.

📜 2. History & Evolution
Created by Guido van Rossum in 1991, inspired by the ABC language.
Named after Monty Python’s Flying Circus, not the snake.

Major milestones:
Python 2.0 (2000): Unicode support, garbage collection.
Python 3.0 (2008): Major syntax overhaul.
Python 3.11 (2023): Up to 60% faster, better error messages.

✨ 3. Key Features
Simple syntax: Easy to read and write.
Dynamic typing: No need to declare variable types.
Indentation-based blocks: No curly braces; whitespace matters.
Rich standard library: Includes modules for math, file I/O, networking, etc.
Interactive shell (REPL): Great for testing code snippets.

🧪 4. Basic Syntax
Keywords: Reserved words like if, else, def, class, try.
Identifiers: Names for variables, functions, etc. Must start with a letter or _.
Statements: Can span multiple lines using \; multiple statements per line with ;.
Comments: Use # for single-line comments.

🔢 5. Variables & Data Types
Assignment: x = 5 binds value to variable.
Built-in types: int, float, str, list, tuple, dict, set, bool.
Type casting: Convert between types using int(), str(), etc.

➕ 6. Operators
Arithmetic: +, -, *, /, //, %, **
Comparison: ==, !=, <, >, <=, >=
Logical: and, or, not
Bitwise: &, |, ^, ~, <<, >>
Membership: in, not in
Identity: is, is not

🔁 7. Control Flow
Conditional: if, elif, else, match-case (Python 3.10+)

Loops:
for loop: Iterates over sequences.
while loop: Runs while condition is true.
break, continue, pass: Control loop behavior.

🧵 8. Functions & Modules
Functions: Defined using def, can have default, keyword, or arbitrary arguments.
Scope: global, local, nonlocal variables.
Modules: Reusable code files; import with import or from ... import.

📚 9. Data Structures
Strings
Immutable, support slicing, formatting, and many methods (.upper(), .replace()).

Lists
Mutable, ordered, supports indexing, slicing, and methods like .append(), .sort().

Tuples
Immutable, ordered, useful for fixed collections.

Sets
Unordered, unique elements, supports set operations (union, intersection).

Dictionaries
Key-value pairs, fast lookup, supports nesting and methods like .get(), .items().

📁 10. File Handling
Use open() to read/write files.
Modes: 'r', 'w', 'a', 'rb', 'wb'.
Use with open(...) as f: for safe file handling.

🧱 11. Object-Oriented Programming
Classes & Objects: Define with class, instantiate with obj = ClassName().
Inheritance: Share behavior across classes.
Encapsulation: Hide internal state.
Polymorphism: Same interface, different behavior.

🛠️ 12. Advanced Topics
Exceptions: Handle errors with try, except, finally.
Multithreading: Run tasks concurrently.
Networking: Use socket and urllib for web communication.
Decorators: Modify function behavior.
Generators: Yield values lazily.
Context Managers: Use with for resource management.

📦 13. Environment Setup
Install via official website or package managers (apt, brew, pip).
Use venv for isolated environments.
Set environment variables like PYTHONPATH, PYTHONSTARTUP.

🌐 14. Application Areas
Data Science: NumPy, Pandas, Matplotlib.
Machine Learning: TensorFlow, Scikit-learn.
Web Development: Django, Flask.

Automation: CRON jobs, scripting.
IoT & Embedded: MicroPython, Raspberry Pi.

GUI: Tkinter, PyQt.


