Title: Using Postman

---
## 1. What is Postman?
---

Postman is a popular application used for building, testing, and documenting APIs. It provides a user-friendly interface for creating and sending HTTP requests to a server and then viewing the responses without having to write any code.

* **Analogy:** If your API is a restaurant's kitchen, Postman is your personal "test customer." üßë‚Äçüç≥ You can use it to place any order (send any request) you want and see exactly what the kitchen sends back (the response). This lets you check if every item on your menu is being prepared correctly before you open to the public.

---
## 2. The Postman Interface
---

When you open Postman, the interface is divided into three main parts:



* **Sidebar (Left):** This is where you organize your work. You'll find your history of previous requests and can create "Collections" to save and group related requests.
* **Request Builder (Top):** This is your main workspace. Here, you define the request you want to send. You'll choose the HTTP method (like GET, POST), enter the URL, and add any necessary details like headers or a request body.
* **Response Viewer (Bottom):** After you send a request, the server's response appears here. You can see the status code (e.g., `200 OK`), the body of the response (the data), and other details.

---
## 3. Making Your First Request (A Step-by-Step Guide)
---

Let's test the FastAPI application we discussed previously. Make sure your Uvicorn server is running.

### **Step 1: Making a GET Request**

This request will "get" the root message from our API.

1.  **Open a New Tab:** In Postman, click the `+` button to open a new request tab.
2.  **Select the Method:** Ensure the dropdown menu next to the URL bar is set to `GET`. This is usually the default.
3.  **Enter the URL:** In the URL bar, type the address of your local server's root endpoint: `http://127.0.0.1:8000/`
4.  **Send the Request:** Click the blue **Send** button.
5.  **Check the Response:** In the Response Viewer below, you should see the JSON response from your API.
    * **Status:** `200 OK` (This means the request was successful).
    * **Body:** `{"Hello": "World"}`

### **Step 2: Making a POST Request with a Body**

Now, let's create a new item by sending data to the `/items/` endpoint.

1.  **Change the Method:** In the same tab, change the dropdown from `GET` to `POST`.
2.  **Update the URL:** Change the URL to `http://127.0.0.1:8000/items/`
3.  **Add the Body:**
    * Below the URL bar, click on the **Body** tab.
    * Select the **raw** radio button.
    * On the far right, change the format dropdown from `Text` to `JSON`.
4.  **Write the JSON Data:** In the text area, enter the JSON data for the item you want to create. This data must match the Pydantic model in your FastAPI code.

    ```json
    {
        "name": "Laptop",
        "price": 1200.50,
        "is_offer": true
    }
    ```

5.  **Send the Request:** Click the blue **Send** button.
6.  **Check the Response:** The Response Viewer will now show the data you just sent, confirming that the API received and processed it correctly.
    * **Status:** `200 OK`
    * **Body:** The same JSON object you sent.

---
## 4. Key Features for Organization
---

### **Collections**

A **collection** is a folder for saving and organizing your API requests. Instead of re-typing a request every time, you can save it to a collection. This is essential for any project.

* **How to Use:** After making a request, click the **Save** button next to the Send button. You can then name the request and choose (or create) a collection to save it in.

### **Environments and Variables**

Often, you'll have parts of your API requests that change, like the URL (e.g., one for local development and one for production). Instead of manually changing the URL everywhere, you can use variables.

* **How it Works:** You can create an "Environment" (e.g., "Local Development") and define a variable like `baseUrl` with the value `http://127.0.0.1:8000`.
* **Usage:** In your request URL, you would then write `{{baseUrl}}/items/`. Postman will automatically substitute `{{baseUrl}}` with the correct value from your active environment. This makes switching between servers incredibly easy.